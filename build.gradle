plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.wildetechsolutions'
version = '1.0.0'

ext {
    nexusUrl = System.getenv('NEXUS_URL')
    snapshotsRepository = "$nexusUrl/maven-snapshots/"
    releasesRepository = "$nexusUrl/maven-releases/"

    // Change the publish repository as needed
    publishRepository = version.toString().endsWith("SNAPSHOT") ? snapshotsRepository : releasesRepository

    artifactName = POM_ARTIFACT_ID

    localMaven = "${System.getProperty('user.home')}/SoftwareProjects/LocalMaven/" + project.ext.artifactName + '_' + version
}



repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

publishing {
    publications {

        mavenJava(MavenPublication) {
            artifactId = artifactName
            pom {
                name = 'reflection-utils'
                description = 'A simple library for accessing sub fields and sub field types'
                url = 'https://github.com/WildeTechSolutions/Reflection-Utils'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'WildeTechSolutions'
                        name = 'Thomas Wilde'
                        email = 'thomas.wilde@wildetechsolutions.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/WildeTechSolutions/Reflection-Utils'
                    developerConnection = 'scm:git:ssh://github.com:WildeTechSolutions/Reflection-Utils.git'
                    url = 'https://github.com/WildeTechSolutions/Reflection-Utils'
                }
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {

        if (gradle.taskGraph.hasTask(":deployToSonatype")) {
            maven {
                url file(project.ext.localMaven)
            }
        }else{
            maven {
                url publishRepository
                credentials {
                    username = System.getenv('NEXUS_USER')
                    password = System.getenv('NEXUS_PASSWORD')
                }
            }
        }

    }

}

task uploadBundle(type: Exec) {
    // Check if the OS supports curl
    doFirst {

        // Set up the command to execute curl
        commandLine 'curl', '--request', 'POST',
                '--verbose',
                '--header', 'Authorization: Bearer bkFTaWNBbTQ6L0owNEUxc0VrNTV3K3l5Q3hxR3B4S3RGa1BmaXM0SXd0UG9aU2R6b0N4VDIK==',
                '--form', "bundle=@" + project.ext.localMaven + '.zip',
                '"https://central.sonatype.com/api/v1/publisher/upload?name=reflection-utils&publishingType=USER_MANAGED"'
    }

    // Optionally handle the output
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
    doLast {
        println "Curl command output: ${output()}"
    }
}

task zipLocalDirectory(type: Zip) {
    // Replace 'path_to_your_directory' with the path to your local directory

    // Set the destination directory and archive name
    destinationDirectory = file(file(project.ext.localMaven).parent)
    archiveFileName = project.ext.artifactName + '_' + version + '.zip'

    // Set the contents of the zip file to include all files and directories under 'directoryPath'
    // but exclude files starting with 'maven-metadata'
    from(project.ext.localMaven) {
        exclude '**/maven-metadata*'
    }
}

task deployToSonatype {
    dependsOn 'publish', 'zipLocalDirectory', 'uploadBundle'

    uploadBundle.mustRunAfter zipLocalDirectory
}

signing {
    sign publishing.publications.mavenJava
}






